Aula  01


Algorítimo
Um algoritmo é um conjunto finito de instruções ou regras bem definidas que são seguidas para realizar uma tarefa específica ou resolver um problema. Em termos simples, é um procedimento ou fórmula que descreve como realizar uma operação de forma sistemática.
Cada passo do algoritmo deve ser definido de maneira clara e sem ambiguidades, para que possa ser seguido sem interpretações errôneas.Um algoritmo deve ter um número finito de passos. Deve terminar após um número finito de operações, com um resultado ou solução.
Um algoritmo pode ter zero ou mais entradas (dados fornecidos ao início) e deve produzir uma ou mais saídas (resultados ou soluções).Os passos do algoritmo devem ser suficientemente básicos para que possam ser executados em um tempo finito com os recursos disponíveis.
Algoritmos fornecem um método estruturado para resolver problemas, desde simples tarefas diárias até problemas complexos de computação.
A escolha do algoritmo pode impactar a eficiência de um programa, incluindo tempo de execução e uso de memória. Algoritmos eficientes são cruciais para aplicações que lidam com grandes volumes de dados.
Algoritmos são fundamentais para a automação de processos em software, desde operações básicas até sistemas complexos de inteligência artificial.
Algoritmos são a base para a programação e desenvolvimento de software, permitindo a criação de soluções digitais para uma ampla gama de aplicações.
https://rockcontent.com/br/blog/algoritmo/


Inteligencia Artificial
Inteligência Artificial (IA) refere-se à capacidade de sistemas computacionais realizarem tarefas que normalmente requerem inteligência humana.
Isso inclui funções como raciocínio, aprendizado, percepção, e tomada de decisão.
A IA pode ser encontrada em diversos aspectos da vida cotidiana e em várias áreas tecnológicas, e pode ser dividida em diferentes categorias e subcampos.
A Inteligência Artificial é um campo da ciência da computação que se dedica ao desenvolvimento de sistemas e tecnologias capazes de executar tarefas que exigem inteligência humana. 
O objetivo principal da Inteligencia artificial é criar máquinas que possam simular processos cognitivos humanos, como aprendizado, raciocínio, e percepção, e aplicar essas habilidades para resolver problemas complexos de maneira autônoma.
https://www.alura.com.br/artigos/inteligencia-artificial-ia?utm_term=&utm_campaign=%5BSearch%5D+%5BPerformance%5D+-+Dynamic+Search+Ads+-+Artigos+e+Conte%C3%BAdos&utm_source=adwords&utm_medium=ppc&hsa_acc=7964138385&hsa_cam=11384329873&hsa_grp=165988188187&hsa_ad=700840818675&hsa_src=g&hsa_tgt=dsa-2276348409503&hsa_kw=&hsa_mt=&hsa_net=adwords&hsa_ver=3&gad_source=1&gclid=EAIaIQobChMI1qfN39H0hwMVqAGtBh2ycTK1EAAYASAAEgJsy_D_BwE


Sistema operacional
Sistema Operacional (SO) é um software fundamental que gerencia o hardware do computador e fornece serviços para outros softwares.
Em essência, o sistema operacional atua como uma ponte entre o hardware e os aplicativos que os usuários desejam executar. 
Ele facilita a comunicação e a execução de tarefas no computador, tornando a interação com o sistema mais eficiente e intuitiva.
Um sistema operacional é um conjunto de programas que gerencia o hardware do computador e oferece uma plataforma sobre a qual outros aplicativos podem ser executados. 
https://tecnoblog.net/responde/o-que-e-um-sistema-operacional/

Banco de dados
Banco de Dados é um sistema organizado para armazenar, gerenciar e recuperar informações de maneira eficiente e estruturada.
É um conjunto de dados inter-relacionados que são armazenados e acessados de forma eletrônica. 
Bancos de dados são fundamentais para aplicações em diversas áreas, desde sistemas de gerenciamento empresarial até redes sociais e serviços de e-commerce.
Um banco de dados é um sistema que coleta e organiza dados em uma estrutura que facilita o armazenamento, a busca, a modificação e a análise dessas informações. 
A principal função de um banco de dados é fornecer um meio eficiente e seguro para gerenciar grandes volumes de dados e garantir que essas informações possam ser recuperadas e manipuladas conforme necessário.
https://www.oracle.com/br/database/what-is-database/#:~:text=Um%20banco%20de%20dados%20%C3%A9,banco%20de%20dados%20(DBMS).

Rede Neural Artificial
Rede Neural Artificial (RNA) é um modelo computacional inspirado no funcionamento do cérebro humano, projetado para reconhecer padrões, aprender com dados e tomar decisões.
Redes neurais artificiais são uma parte fundamental da Inteligência Artificial e do Aprendizado de Máquina, e são usadas para uma variedade de tarefas, como reconhecimento de imagens, processamento de linguagem natural e previsão de séries temporais.
Uma rede neural artificial é um sistema computacional que simula a forma como os neurônios no cérebro humano processam informações. 
Ela é composta por camadas de "neurônios" artificiais interconectados que trabalham em conjunto para realizar tarefas complexas. 
O objetivo das RNAs é aprender a partir de dados e realizar previsões ou classificações com base nesse aprendizado.
https://ebaconline.com.br/blog/rede-neural-seo



Aula 02




1. Relação entre a LGPD e os Data Centers no Brasil

Lei Geral de Proteção de Dados (LGPD): Lei nº 13.709/2018.


A LGPD entrou em vigor em setembro de 2020, estabelecendo diretrizes para a coleta, uso, tratamento e armazenamento de dados pessoais no Brasil.
A LGPD (Lei Geral de Proteção de Dados Pessoais), Lei nº 13.709/2018, é uma legislação brasileira que visa proteger a privacidade e os dados pessoais dos indivíduos.
O conceito central da LGPD é garantir que as informações pessoais sejam tratadas de maneira segura e transparente, respeitando os direitos dos titulares e estabelecendo responsabilidades para as organizações que processam esses dados.
Ela é aplicável a todas as organizações que lidam com dados pessoais, incluindo as que operam data centers.
Os data centers, como responsáveis pelo armazenamento e processamento de grandes volumes de dados, devem garantir que suas práticas estejam em conformidade com a LGPD.
Data centers são instalações físicas ou virtuais responsáveis pelo armazenamento, gerenciamento e processamento de grandes volumes de dados. 
Com a implementação da LGPD (Lei Geral de Proteção de Dados), data centers têm um papel crucial na proteção dos dados pessoais que eles armazenam e processam.
Os data centers internacionais desempenham um papel crucial no armazenamento, processamento e gerenciamento de dados em uma escala global. Eles servem a uma ampla gama de empresas e organizações e são essenciais para a infraestrutura digital global.

Isso inclui:
Segurança de Dados - Implementação de medidas técnicas e administrativas para proteger dados pessoais contra acessos não autorizados e vazamentos.
Transferência Internacional de Dados - Seguir regras específicas para a transferência de dados pessoais para fora do Brasil, garantindo que os países destinatários ofereçam um nível de proteção adequado.
Responsabilidade e Transparência - Garantir que as operações de processamento de dados sejam transparentes e que os titulares de dados possam exercer seus direitos, como acesso e exclusão de dados.

2. Formatos de Arquivos de Dados Proprietários e Abertos

Formatos Proprietários: Arquivos que são controlados por uma empresa ou organização específica, geralmente vinculados a software específico.
São formatos de arquivo que pertencem a uma empresa específica e geralmente exigem software específico para serem abertos ou modificados. Muitas vezes, esses formatos não são documentados publicamente, o que pode limitar a interoperabilidade e a acessibilidade.
O uso de formatos proprietários pode criar dependência de fornecedores e aumentar custos devido a licenças de software. Além disso, a falta de documentação pública pode dificultar a leitura ou conversão dos arquivos no futuro.
Exemplos:
Microsoft Word - Documento de texto criado e controlado pela Microsoft.
Adobe Photoshop - Formato de arquivo usado para armazenar imagens editadas com Adobe Photoshop.

Formatos Abertos: Arquivos que seguem padrões abertos e são independentes de qualquer software específico, permitindo a interoperabilidade e acessibilidade.
São formatos de arquivos que seguem padrões abertos e documentados publicamente. Eles são projetados para serem acessíveis e modificáveis por qualquer software que suporte o padrão, promovendo interoperabilidade e sustentabilidade a longo prazo.
O uso de formatos abertos facilita o compartilhamento e a reutilização de dados. Eles são geralmente mais sustentáveis, pois a documentação aberta permite que outros desenvolvedores e organizações criem ferramentas e softwares compatíveis.
Exemplos:
CSV -  Formato de arquivo de valores separados por vírgula, utilizado para armazenar dados tabulares e amplamente suportado por diferentes softwares.
Open Document Format - Formato de documento de texto usado por vários processadores de texto, incluindo LibreOffice e OpenOffice.

2.2 Implicações Relacionadas a Dados Públicos

Acessibilidade - Formatos abertos garantem que dados públicos possam ser acessados e utilizados por qualquer pessoa sem a necessidade de software específico. Isso promove maior transparência e facilita a colaboração e a análise por diferentes partes interessadas.
Interoperabilidade - Dados em formatos abertos são mais facilmente integrados com outros sistemas e ferramentas, aumentando a interoperabilidade.
Custo - Formatos proprietários podem exigir licenças de software caras, enquanto formatos abertos são frequentemente gratuitos, reduzindo o custo de acesso e uso dos dados.
Preservação a Longo Prazo - Dados em formatos abertos tendem a ser mais facilmente preservados a longo prazo, uma vez que os padrões abertos são mais propensos a serem suportados no futuro do que formatos proprietários.





Aula 03


1.C

Características:
Linguagem de Baixo Nível: Fornece controle direto sobre o hardware e gerenciamento de memória.
Compilada: O código é convertido em código de máquina pelo compilador, resultando em alta performance e eficiência.
Sintaxe: Mais detalhada e exigente, com necessidade de gerenciamento explícito de memória.





#include <stdio.h>

int main() {
    printf("Hello world!\n");
    return 0;
}


2 Java

Características:
Linguagem Orientada a Objetos: Focada em orientação a objetos, encapsulamento e reutilização de código.
Compilada para Bytecode: O código é compilado em bytecode, que é executado na Java Virtual Machine (JVM). Isso permite portabilidade entre diferentes sistemas.
Sintaxe: Verbosa, mas estruturada, com foco em robustez e manutenção.



import java.util.*;
import java.lang.*;
import java.io.*;

// The main method must be in a class named "Main".
class Main {
    public static void main(String[] args) {
        System.out.println("Hello world!");
    }

3 Bash

Características:
Linguagem de Script de Shell: Usada para automação de tarefas e manipulação de sistemas Unix/Linux.
Interpretada: O código é executado diretamente pelo interpretador de shell, sem necessidade de compilação.
Sintaxe: Simples, mas limitada em comparação com linguagens de programação completas. Foca em comandos e scripts para gerenciar o sistema.




#!/bin/bash

echo "Hello world!"





Comparação:

. Sintaxe e Facilidade de Uso:
C: Sintaxe mais complexa, com necessidade de gerenciamento explícito de memória. Requer mais detalhes e cuidado.
Java: Sintaxe estruturada e orientada a objetos. Mais verboso, mas oferece uma boa organização e robustez.
Bash: Sintaxe simples e voltada para a execução de comandos do sistema. Ideal para scripts e tarefas administrativas, mas não é adequado para desenvolvimento de software complexo.
2. Execução e Performance:
C: Compilado diretamente para código de máquina, o que proporciona alta performance e controle sobre o hardware.
Java: Compilado para bytecode, que é interpretado pela JVM. Isso permite portabilidade, mas pode ter uma leve perda de performance em comparação com o código nativo.
Bash: Interpretado, com desempenho dependente do interpretador de shell e das operações do sistema. Adequado para scripts rápidos e tarefas de automação, mas não para aplicações de alta performance.
3. Casos de Uso:
C: Ideal para desenvolvimento de sistemas de baixo nível, como sistemas operacionais, drivers e aplicativos que requerem alta performance.
Java: Adequado para aplicações corporativas, desenvolvimento web e aplicativos móveis. Oferece portabilidade entre diferentes plataformas.
Bash: Usado para scripts e automação em sistemas Unix/Linux. Ideal para tarefas de administração e manutenção do sistema.





Aula 04


1 - 
# Exemplo de estrutura de decisão e repetição em Python

# Estrutura de decisão
def verificar_idade(idade):
    if idade < 18:
        return "Você é menor de idade."
    elif idade < 65:
        return "Você é adulto."
    else:
        return "Você é idoso."

# Estrutura de repetição
def listar_idades(idades):
    for idade in idades:
        resultado = verificar_idade(idade)
        print(f"Idade: {idade} - {resultado}")

# Lista de idades para testar a estrutura de repetição
idades = [12, 25, 60, 70, 16]

# Chama a função que lista as idades e suas classificações
listar_idades(idades)

Execução:
Idade: 12 - Você é menor de idade.
Idade: 25 - Você é adulto.
Idade: 60 - Você é adulto.
Idade: 70 - Você é idoso.
Idade: 16 - Você é menor de idade.

Comprovante de execução:
https://github.com/CaioVale580/Projeto-Aplicado-CV/blob/main/Screenshot_28-8-2024_85540_www.programiz.com.jpeg


2 - 
import random

# Função principal do jogo de adivinhação
def jogo_adivinhacao():
    # Gera um número aleatório entre 1 e 100
    numero_secreto = random.randint(1, 100)
    tentativas = 0
    acertou = False

    print("Bem-vindo ao jogo de adivinhação!")
    print("Tente adivinhar o número entre 1 e 100.")

    # Estrutura de repetição: loop até o usuário adivinhar o número
    while not acertou:
        # Solicita ao usuário um palpite
        palpite = int(input("Digite seu palpite: "))
        tentativas += 1
        
        # Estrutura de decisão: verifica se o palpite está correto
        if palpite < numero_secreto:
            print("O número secreto é maior.")
        elif palpite > numero_secreto:
            print("O número secreto é menor.")
        else:
            acertou = True
            print(f"Parabéns! Você acertou o número em {tentativas} tentativas.")

# Executa o jogo
jogo_adivinhacao()

execução:
Bem-vindo ao jogo de adivinhação!
Tente adivinhar o número entre 1 e 100.
Digite seu palpite: 

Comprovante de execução:
https://github.com/CaioVale580/Projeto-Aplicado-CV/blob/main/Screenshot_28-8-2024_9952_www.programiz.com.jpeg



Aula 05

1 - Algorítmo Bubble sort usando Python:


def bubble_sort(arr):

    # Outer loop to iterate through the list n times
    for n in range(len(arr) - 1, 0, -1):

        # Inner loop to compare adjacent elements
        for i in range(n):
            if arr[i] > arr[i + 1]:

                # Swap elements if they are in the wrong order
                swapped = True
                arr[i], arr[i + 1] = arr[i + 1], arr[i]


# Sample list to be sorted
arr = [39, 12, 18, 85, 72, 10, 2, 18]
print("Unsorted list is:")
print(arr)

bubble_sort(arr)

print("Sorted list is:")
print(arr)


Unsorted list is:
[39, 12, 18, 85, 72, 10, 2, 18]
Sorted list is:
[2, 10, 12, 18, 18, 39, 72, 85]


https://github.com/CaioVale580/Projeto-Aplicado-CV/blob/main/Screenshot_4-9-2024_92629_www.geeksforgeeks.org.jpeg


2 - Algorítmo que imprima apenas as vogais :

def Check_Vow(text, vowels): 
    final = [each for each in text if each in vowels] 
    print(len(final)) 
    print(final) 
      
Text = "Bom dia"
vowels = "AaEeIiOoUu"
Check_Vow(text, vowels); 

Result: ['o','i','a']

https://github.com/CaioVale580/Projeto-Aplicado-CV/blob/main/Screenshot_4-9-2024_93426_www.programiz.com.jpeg




Aula 06


1)

Info:
def info(nome, idade, cidade):
    print(f"Nome: {nome}", f"Idade: {idade}", f"Cidade: {cidade}!", sep=" - ", end="\n")
    
info("Caio", 24, "Rio de Janeiro")

Execução:

Nome: Caio - Idade: 24 - Cidade: Rio de Janeiro!


2)
def calculadora():
    num1 = float(input("Digite o primeiro número: "))
   
    num2 = float(input("Digite o segundo número: "))
   
    operacao = input("Digite a operação desejada (+, -, *, /): ")

  
    if operacao == '+':
        resultado = num1 + num2
    elif operacao == '-':
        resultado = num1 - num2
    elif operacao == '*':
        resultado = num1 * num2
    elif operacao == '/':
        if num2 != 0:
            resultado = num1 / num2
        else:
            resultado = "Erro: Divisão por zero não é permitida."
    else:
        resultado = "Operação inválida."

    print("Resultado:", resultado)


calculadora()


Execução:
Digite o primeiro número: 
20
Digite o segundo número: 
20
Digite a operação desejada (+, -, *, /): 
+
Resultado: 40.0






